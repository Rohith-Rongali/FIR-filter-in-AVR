;
; FILTER32.asm
;
; Created: 07-11-2020 17:09:39
; Author : HP
;


; Replace with your application code
LDI ZL,LOW(NUM<<1);
LDI ZH,HIGH(NUM<<1);
LDI R24,0X20;  load the number of coeffecients

LDI XL,0XA0;
LDI XH,0X00;location for coefficients A0-BF

LDI YL,0XD0;
LDI YH,0X00; location to store outputs
MOV R11,YL; THESE REGISTERS ARE NEEDED BECAUSE I AM USING Y POINTER FOR 2 PURPOSES
MOV R12,YH;

LDI R19,0X60; ADDRESS FOR THE BUFFER(60-A0)
LDI R20,0X40; R20 SHOULD ALWAYS BE 0X20 LESS THAN R19.

LDI R22,0X20; JUST SPARE
MOV R9,R22; $$$$ R9 IS ALWAYS EQUAL TO NO. OF TAPs, IT'S A CONSTANT.



;Loading of coefficients into **X:0xA0-0xBF**
;R23 JUST USED AS A SPARE REGISTER, R24 COUNTER FOR COEFFICIENTS, FINALLY BECOMES ZERO.
CONTLD:LPM R23,Z+;
ST X+,R23;
DEC R24;
BREQ CONTLDOUT;
RJMP CONTLD;
CONTLDOUT:

MOV YL,R19; y initially points 60
LDI R24,0x20; AGAIN AS A COUNTER.
;LOADING VALUES INTO BUFFER "Y:0x60-0x9F".
;R23 JUST USED AS A SPARE.
CONTPUSH:LPM R23,Z+;
STD Y+32,R23;
ST Y+,R23;
DEC R24;
BREQ STOPPUSH;
RJMP CONTPUSH;
STOPPUSH:
;Y NOW POINTS TO OLD on the right side AND THE PGM ENSURES R19 KEEPS DOING SO.
MOV R19,YL;
MOV R20,R19;
SUB R20,R9;

LDI YH,0X00;


LDI R23,0XFA; NO OF OUTPUTS COUNTER


LDI R22,0X00; IMPORTANT KEEP IT HERE ONLY(RECOGNISES DEC OR INC CYCLE)



SUB YL,R9;(THE OLD ON THE LEFT SIDE)

;;;;;;STARTING OF THE BIGLOOP;;;;;;
 
CONTBIGLOOP:

LDI R21,0X00; R21 JUST A SPARE NO SIGNIFICANCE
MOV R3,R21; '-2' COUNTER  ;CLEARING ALL THE REGISTERS BEFORE MAC CYCLE
MOV R4,R21; LOWER BYTE
MOV R5,R21; UPPER BYTE
MOV R6,R21; CARRY HOLDER



LDI R24,0X20; NO OF MULTIPLICATIONS COUNTER(=NO OF COEFFECIENTS)


;;;;;;;;;;; MULTIPLY AND ACC;;;;;;;;;;


CONTMAIN:

SBRC R22,0;
RJMP INCDEC;
LD R16,-X; 
LD R17,Y+;


RJMP DECINC;

INCDEC:
LD R16,X+;
LD R17,-Y;

DECINC:

FMULS R16,R17;


;ADDING R0,R1 TO R4,R5,R6 :--
ADD R4,R0;
ADC R5,R1;
BRCC NOCARRY;
INC R6;
NOCARRY:




LSL R1; UPPER BIT OF THE MULTIPLICATION (CHECKING IF THE MULTIPLICATION RESULT WAS NEGATIVE)
BRCC NOTNEG1;
INC R3;
NOTNEG1:
DEC R24;
BREQ STOP;

RJMP CONTMAIN;

;;;;;;;;;;; MULTIPLY AND ACC;;;;;;;;;;;;

STOP:



;STORE THE OUTPUTS AT THE DESIRED LOCATIONS--
SUB R6,R3;
MOV YL,R11;
MOV YH,R12;
ST Y+,R6;
ST Y+,R5;
MOV R11,YL;
MOV R12,YH;

;REPLACING THE OLD WITH NEW
MOV YL,R19;
LDI YH,0X00;
LPM R17,Z+;
ST Y,R17; REPLACING THE OLD ONE WITH THE NEW
SUB YL,R9; R9=32, YL IS NOW THE LEFT OLD.
ST Y,R17;


;INC TO GET THE NEXT OLDEST
INC R19;
INC R20;
SBRC R20,7;
LDI R19,0X80;
MOV R20,R19;
SUB R20,R9;


SBRC R22,0;
RJMP PDECINC;
MOV YL,R19;   MAKING Y POINT TO THE RIGHT OLD.
RJMP PINCDEC;

PDECINC:
INC YL; MAKING Y POINT TO THE LEFT OLD/RIGHT OLD DEPENDS BUT SHALL BE FEASIBLE FOR INCREMENTING.
PINCDEC:



COM R22;

DEC R23;
BREQ FULLSTOP;

RJMP CONTBIGLOOP;

FULLSTOP:


NOP;
NUM: .db 0XF3,0XF6,0X07,0XF0,0X00,0XFF,0X05,0X0D,0X01,0X01,0X00,0XF0,0X00,0XEC,0XE0,0X34,0X34,0XE0,0XEC,0X00,0XF0,0X00,0X01,0X01,0X0D,0X05,0XFF,0X00,0XF0,0X07,0XF6,0XF3, 0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79,0x0,0xbe,0xb4,0x4b,0x79;

